stop("Les colonnes 'source' et 'target' doivent avoir le type de données 'character'.")
}
# Vérifier l'existence éventuelle d'une colonne de poids (weight)
if ("weight" %in% colnames(links)) {
cat("Colonne 'weight' présente.\n")
# Vérifier le type de données dans la colonne weight
if (is.numeric(links$weight)) {
cat("Type de données 'numeric' dans la colonne 'weight'.\n")
} else {
stop("La colonne 'weight' doit avoir le type de données 'numeric'.")
}
} else {
cat("Pas de colonne 'weight' (graphe non pondéré).\n")
}
# Afficher un échantillon du data frame
cat("\nAperçu du data frame :\n")
print(head(links))
weighted_graph <- graph_from_data_frame(links, directed = FALSE) %>%
as.undirected()
colnames(links)
# Extraire les liens
links <- data$links[, c("source", "target")]
# Initialiser un graphe pondéré
weighted_graph <- graph_from_data_frame(links, directed = FALSE) %>%
as.undirected()
# Convertir le graphe en matrice d'adjacence non pondérée
adjacency_matrix <- as.matrix(as_adjacency_matrix(weighted_graph, type = "both", attr = "weight"))
View(weighted_graph)
# Initialiser un graphe pondéré
weighted_graph <- graph_from_data_frame(links, directed = FALSE) %>%
as.undirected()
# Convertir le graphe en matrice d'adjacence non pondérée
adjacency_matrix <- as.matrix(as_adjacency_matrix(weighted_graph, type = "both", attr = "weight"))
# Convertir le graphe en matrice d'adjacence non pondérée
adjacency_matrix <- as.matrix(as_adjacency_matrix(weighted_graph, type = "both"))
# Obtenir le nombre de composantes connexes
num_connected_components <- length(components(weighted_graph))
cat("Nombre de composantes connexes :", num_connected_components, "\n")
if (num_connected_components > 1) {
# Obtenir la liste des composantes connexes de moins de 10 nœuds
small_connected_components <- components(weighted_graph)$membership %>%
as_tibble() %>%
group_by(membership) %>%
summarise(nodes = list(.$id)) %>%
filter(length(unlist(nodes)) < 10)
# Afficher les composantes connexes avec les informations 'url' et 'parentId' pour chaque nœud
cat("\nComposantes connexes de moins de 10 nœuds:\n")
for (i in seq_along(small_connected_components$nodes)) {
cat("\nComposante", i, ":")
for (node_id in unlist(small_connected_components$nodes[[i]])) {
node_info <- data$nodes[[node_id]]
cat("\n  Nœud", node_id, ":")
cat("\n    - url:", node_info$options$url$url)
cat("\n    - parentId:", node_info$parentId)
}
}
cat("\n")
}
small_connected_components <- components(weighted_graph)$membership %>%
as_tibble() %>%
group_by(membership) %>%
small_connected_components <- components(weighted_graph)$membership %>%
as_tibble() %>%
group_by(membership) %>%
summarise(nodes = list(.$id)) %>%
small_connected_components <- components(weighted_graph)$membership %>%
as_tibble() %>%
group_by(membership) %>%
summarise(nodes = list(.$id)) %>%
small_connected_components <- components(weighted_graph)$membership %>%
as_tibble() %>%
group_by(membership) %>%
summarise(nodes = list(.$id)) %>%
filter(length(unlist(nodes)) < 10)
small_connected_components <- components(weighted_graph)$membership %>%
as_tibble() %>%
group_by(membership) %>%
summarise(nodes = list(.$id)) %>%
filter(length(unlist(nodes)) < 10)
library(dplyr)
install.packages("vctrs")
install.packages("vctrs")
library(dplyr)
# Obtenir la liste des composantes connexes de moins de 10 nœuds
small_connected_components <- components(weighted_graph)$membership %>%
as_tibble() %>%
group_by(membership) %>%
summarise(nodes = list(.$id)) %>%
filter(length(unlist(nodes)) < 10)
library(jsonlite)
library(igraph)
library(ggplot2)
library(dplyr)
# Charger le fichier JSON
data <- fromJSON("lobbys-minimal.json")
# Extraire les liens
links <- data$links[, c("source", "target")]
# Initialiser un graphe pondéré
weighted_graph <- graph_from_data_frame(links, directed = FALSE) %>%
as.undirected()
# Convertir le graphe en matrice d'adjacence non pondérée
adjacency_matrix <- as.matrix(as_adjacency_matrix(weighted_graph, type = "both"))
# Obtenir la matrice d'adjacence pondérée
#adjacency_matrix <- as.matrix(get.adjacency(weighted_graph, sparse = FALSE))
# Obtenir le nombre de composantes connexes
num_connected_components <- length(components(weighted_graph))
cat("Nombre de composantes connexes :", num_connected_components, "\n")
# Obtenir la liste des composantes connexes de moins de 10 nœuds
small_connected_components <- components(weighted_graph)$membership %>%
as_tibble() %>%
group_by(membership) %>%
summarise(nodes = list(.$id)) %>%
filter(length(unlist(nodes)) < 10)
# Obtenir les composantes connexes du graphe
graph_clusters <- clusters(weighted_graph)
# Accéder aux membres de chaque composante
components_membership <- graph_clusters$membership
# Convertir en tibble
components_tibble <- as_tibble(data.frame(id = names(components_membership), membership = components_membership))
# Regrouper et filtrer les composantes connexes de moins de 10 nœuds
small_connected_components <- components_tibble %>%
group_by(membership) %>%
summarise(nodes = list(id)) %>%
filter(length(unlist(nodes)) < 10)
summarise(nodes = list(id)) %>%
if (num_connected_components > 1) {
small_connected_components <- components_tibble %>%
group_by(membership) %>%
summarise(nodes = list(id)) %>%
filter(length(unlist(nodes)) < 10)
# Afficher les composantes connexes avec les informations 'url' et 'parentId' pour chaque nœud
cat("\nComposantes connexes de moins de 10 nœuds:\n")
for (i in seq_along(small_connected_components$nodes)) {
cat("\nComposante", i, ":")
for (node_id in unlist(small_connected_components$nodes[[i]])) {
node_info <- data$nodes[[node_id]]
cat("\n  Nœud", node_id, ":")
cat("\n    - url:", node_info$options$url$url)
cat("\n    - parentId:", node_info$parentId)
}
}
cat("\n")
}
# Regrouper et filtrer les composantes connexes de moins de 10 nœuds
if (num_connected_components > 1) {
small_connected_components <- components_tibble %>%
group_by(membership) %>%
summarise(nodes = list(as.character(graph_clusters$csize[membership]))) %>%
filter(as.integer(unlist(nodes)) < 10)
# Afficher les composantes connexes avec les informations 'url' et 'parentId' pour chaque nœud
cat("\nComposantes connexes de moins de 10 nœuds:\n")
for (i in seq_along(small_connected_components$nodes)) {
cat("\nComposante", i, ":")
for (node_id in unlist(small_connected_components$nodes[[i]])) {
node_info <- data$nodes[[node_id]]
cat("\n  Nœud", node_id, ":")
cat("\n    - url:", node_info$options$url$url)
cat("\n    - parentId:", node_info$parentId)
}
}
cat("\n")
}
# Regrouper et filtrer les composantes connexes de moins de 10 nœuds
if (num_connected_components > 1) {
small_connected_components <- components_tibble %>%
group_by(membership) %>%
summarise(nodes = list(unique(graph_clusters$membership[graph_clusters$membership == membership]))) %>%
filter(length(unlist(nodes)) < 10)
# Afficher les composantes connexes avec les informations 'url' et 'parentId' pour chaque nœud
cat("\nComposantes connexes de moins de 10 nœuds:\n")
for (i in seq_along(small_connected_components$nodes)) {
cat("\nComposante", i, ":")
for (node_id in unlist(small_connected_components$nodes[[i]])) {
node_info <- data$nodes[[node_id]]
cat("\n  Nœud", node_id, ":")
cat("\n    - url:", node_info$options$url$url)
cat("\n    - parentId:", node_info$parentId)
}
}
cat("\n")
}
# Regrouper et obtenir les tailles des composantes connexes
component_sizes <- components_tibble %>%
group_by(membership) %>%
summarise(size = n())
# Afficher les tailles de toutes les composantes connexes
print(component_sizes)
num_connected_components
# Nombre de composantes connexes
num_connected_components <- graph_clusters$no
print(paste("Nombre de composantes connexes :", num_connected_components))
# Tailles des composantes connexes
component_sizes <- graph_clusters$csize
print("Tailles des composantes connexes :")
print(component_sizes)
# Charger le fichier JSON
data <- fromJSON("lobbys-minimal.json")
# Extraire les liens
links <- data$links[, c("source", "target")]
# Initialiser un graphe pondéré
weighted_graph <- graph_from_data_frame(links, directed = FALSE) %>%
as.undirected()
# Convertir le graphe en matrice d'adjacence non pondérée
adjacency_matrix <- as.matrix(as_adjacency_matrix(weighted_graph, type = "both"))
# Obtenir les composantes connexes du graphe
graph_clusters <- clusters(weighted_graph)
# Nombre de composantes connexes
num_connected_components <- graph_clusters$no
print(paste("Nombre de composantes connexes :", num_connected_components))
# Nombre de composantes connexes
num_connected_components <- graph_clusters$no
print(paste("Nombre de composantes connexes :", num_connected_components))
# Regrouper et filtrer les composantes connexes de moins de 10 nœuds
if (num_connected_components > 1) {
# Tailles des composantes connexes
component_sizes <- graph_clusters$csize
print("Tailles des composantes connexes :")
print(component_sizes)
# Accéder aux membres de chaque composante
components_membership <- graph_clusters$membership
# Convertir en tibble
components_tibble <- as_tibble(graph_clusters$membership, name = "membership")
# Regrouper et obtenir les tailles des composantes connexes
component_sizes <- components_tibble %>%
group_by(membership) %>%
summarise(size = n())
# Afficher les tailles de toutes les composantes connexes
print(component_sizes)
small_connected_components <- components_tibble %>%
group_by(membership) %>%
summarise(nodes = list(unique(graph_clusters$membership[graph_clusters$membership == membership]))) %>%
filter(length(unlist(nodes)) < 10)
# Afficher les composantes connexes avec les informations 'url' et 'parentId' pour chaque nœud
cat("\nComposantes connexes de moins de 10 nœuds:\n")
for (i in seq_along(small_connected_components$nodes)) {
cat("\nComposante", i, ":")
for (node_id in unlist(small_connected_components$nodes[[i]])) {
node_info <- data$nodes[[node_id]]
cat("\n  Nœud", node_id, ":")
cat("\n    - url:", node_info$options$url$url)
cat("\n    - parentId:", node_info$parentId)
}
}
cat("\n")
}
# Appliquer le clustering sur les nœuds du graphe
num_clusters <- 13  # Choisissez le nombre de clusters souhaité
kmeans_result <- cluster_kmeans(weighted_graph, k = num_clusters)
# Appliquer l'algorithme k-means sur les embeddings des nœuds
num_clusters <- 10  # Choisissez le nombre de clusters souhaité
kmeans_result <- kmeans(adjacency_matrix, centers = num_clusters)
print(kmeans_result)
# Afficher les résultats du clustering avec les informations 'url' et 'parentId'
for (cluster_num in seq_along(kmeans_result)) {
cat("\nCluster", cluster_num, ":\n")
nodes_in_cluster <- as.numeric(names(kmeans_result[[cluster_num]]))
# Afficher les informations 'url' et 'parentId' pour chaque nœud du cluster
for (node_id in nodes_in_cluster) {
node_info <- data$nodes[[node_id]]
cat("  Nœud", node_id, ":\n")
cat("    - url:", node_info$options$url$url, "\n")
cat("    - parentId:", node_info$parentId, "\n")
}
cat("\n")
}
View(adjacency_matrix)
View(adjacency_matrix)
# Identifier le nœud 'F.F.A.F' dans le graphe
target_node <- which(V(weighted_graph)$name == 'F.F.A.F')
# Définir le niveau de voisinage (1 pour les voisins directs)
neighborhood_level <- 1
# Obtenir le sous-graphe centré sur le nœud 'F.F.A.F'
subgraph <- ego(weighted_graph, order = neighborhood_level, nodes = target_node, mode = "all", mindist = 0)
# Obtenir les liens du nœud 'F.F.A.F'
links_FFAF <- get.edgelist(subgraph)
# Identifier le nœud 'F.F.A.F' dans le graphe
target_node <- which(V(weighted_graph)$name == 'F.F.A.F')
# Définir le niveau de voisinage (1 pour les voisins directs)
neighborhood_level <- 1
# Obtenir le sous-graphe centré sur le nœud 'F.F.A.F'
subgraph <- ego(weighted_graph, order = neighborhood_level, nodes = target_node, mode = "all", mindist = 0)
# Obtenir les liens du nœud 'F.F.A.F'
links_FFAF <- get.edgelist(subgraph)
links_FFAF <- get.edgelist(subgraph)
# Obtenir les liens du nœud 'F.F.A.F'
links_FFAF <- edges(ego(weighted_graph, order = neighborhood_level, nodes = target_node, mode = "all", mindist = 0))
print(links_FFAF)
# Identifier le nœud 'F.F.A.F' dans le graphe
target_node <- which(V(weighted_graph)$name == 'F.F.A.F')
# Obtenir les voisins du nœud 'F.F.A.F'
neighbors_FFAF <- neighbors(weighted_graph, target_node)
# Identifier le nœud 'F.F.A.F' dans le graphe
target_node <- which(V(weighted_graph)$name == 'F.F.A.F')
neighbors_FFAF <- neighbors(weighted_graph, target_node)
# Identifier le nœud 'F.F.A.F' dans le graphe
target_node <- which(V(weighted_graph)$name == 'F.F.A.F')
# Obtenir les voisins du nœud 'F.F.A.F'
neighbors_FFAF <- neighbors(weighted_graph, target_node)
# Identifier le nœud 'F.F.A.F' dans le graphe
target_node <- which(V(weighted_graph)$name == 'F.F.A.F')
# Obtenir les voisins du nœud 'F.F.A.F'
neighbors_FFAF <- neighbors(weighted_graph, target_node)
# Identifier le nœud 'F.F.A.F' dans le graphe
target_node <- which(get.vertex.attribute(weighted_graph, "name") == 'F.F.A.F')
# Obtenir les voisins du nœud 'F.F.A.F'
neighbors_FFAF <- neighbors(weighted_graph, target_node)
# Identifier le nœud 'F.F.A.F' dans le graphe
target_node <- which(V(weighted_graph)$name == 'F.F.A.F')
# Obtenir les voisins du nœud 'F.F.A.F'
neighbors_FFAF <- neighbors(weighted_graph, target_node)
# Obtenir les voisins du nœud 'F.F.A.F'
neighbors_FFAF <- neighborhood(weighted_graph, nodes = 'F.F.A.F', order = 1)
# Obtenir les voisins du nœud 'F.F.A.F'
neighbors_FFAF <- neighborhood(weighted_graph, nodes = 'F.F.A.F.', order = 1)
# Obtenir les noms des voisins de 'F.F.A.F'
neighbor_names_FFAF <- V(weighted_graph)$name[neighbors_FFAF]
# Obtenir les noms des voisins de 'F.F.A.F'
neighbor_names_FFAF <- V(weighted_graph)$name[neighbors_FFAF]
# Obtenir les voisins du nœud 'F.F.A.F'
neighbors_FFAF <- neighborhood(weighted_graph, nodes = 'F.F.A.F.', order = 1)
# Obtenir les noms des voisins de 'F.F.A.F'
neighbor_names_FFAF <- V(weighted_graph)$name[neighbors_FFAF]
# Obtenir les voisins du nœud 'F.F.A.F'
neighbors_FFAF <- neighborhood(weighted_graph, nodes = 'F.F.A.F.', order = 1)
# Obtenir les noms des voisins de 'F.F.A.F'
neighbor_names_FFAF <- V(weighted_graph)$name[unlist(neighbors_FFAF)]
# Afficher les noms des voisins
print(neighbor_names_FFAF)
# Appliquer l'algorithme k-means sur les embeddings des nœuds
num_clusters <- 10  # Choisissez le nombre de clusters souhaité
kmeans_result <- kmeans(adjacency_matrix, centers = num_clusters)
# Afficher les résultats du clustering avec les informations 'url' et 'parentId'
for (cluster_num in seq_along(kmeans_result)) {
cat("\nCluster", cluster_num, ":\n")
nodes_in_cluster <- as.numeric(names(kmeans_result[[cluster_num]]))
# Afficher les informations 'url' et 'parentId' pour chaque nœud du cluster
for (node_id in nodes_in_cluster) {
node_info <- data$nodes[[node_id]]
cat("  Nœud", node_id, ":\n")
cat("    - url:", node_info$options$url$url, "\n")
cat("    - parentId:", node_info$parentId, "\n")
}
cat("\n")
}
# Appliquer l'algorithme k-means sur les embeddings des nœuds avec différentes initialisations
num_clusters <- 3  # Choisissez le nombre de clusters souhaité
kmeans_result <- kmeans(adjacency_matrix, centers = num_clusters, nstart = 10)
# Afficher les résultats du clustering avec les informations 'url' et 'parentId'
for (cluster_num in seq_along(kmeans_result)) {
cat("\nCluster", cluster_num, ":\n")
nodes_in_cluster <- as.numeric(names(kmeans_result[[cluster_num]]))
# Afficher les informations 'url' et 'parentId' pour chaque nœud du cluster
for (node_id in nodes_in_cluster) {
node_info <- data$nodes[[node_id]]
cat("  Nœud", node_id, ":\n")
cat("    - url:", node_info$options$url$url, "\n")
cat("    - parentId:", node_info$parentId, "\n")
}
cat("\n")
}
library(skmeans)
install.packages("skmeans")
library(skmeans)
# Appliquer Mini-Batch K-Means sur les embeddings des nœuds
num_clusters <- 10  # Choisissez le nombre de clusters souhaité
batch_size <- 10
num_init <- 10
max_iters <- 100
# Convertir la matrice d'adjacence en format dense
dense_matrix <- as.matrix(adjacency_matrix)
# Appliquer Mini-Batch K-Means
kmeans_result <- MiniBatchKmeans(dense_matrix, clusters = num_clusters,
batch_size = batch_size, num_init = num_init,
max_iters = max_iters, initializer = 'kmeans++',
verbose = TRUE)
library(ClusterR)
library(clusterR)
install.packages("clusterR")
yes
y
install.packages("ClusterR")
# Appliquer Mini-Batch K-Means
kmeans_result <- MiniBatchKmeans(dense_matrix, clusters = num_clusters,
batch_size = batch_size, num_init = num_init,
max_iters = max_iters, initializer = 'kmeans++',
verbose = TRUE)
# Appliquer Mini-Batch K-Means
kmeans_result <- kmeans(dense_matrix, centers = num_clusters, iter.max = max_iters,
nstart = num_init, algorithm = "Lloyd", trace = TRUE)
# Afficher les résultats du clustering avec les informations 'url' et 'parentId'
for (cluster_num in seq_along(kmeans_result)) {
cat("\nCluster", cluster_num, ":\n")
nodes_in_cluster <- as.numeric(names(kmeans_result[[cluster_num]]))
# Afficher les informations 'url' et 'parentId' pour chaque nœud du cluster
for (node_id in nodes_in_cluster) {
node_info <- data$nodes[[node_id]]
cat("  Nœud", node_id, ":\n")
cat("    - url:", node_info$options$url$url, "\n")
cat("    - parentId:", node_info$parentId, "\n")
}
cat("\n")
}
# Afficher les résultats du clustering avec les informations 'url' et 'parentId'
for (cluster_num in seq_along(kmeans_result)) {
cat("\nCluster", cluster_num, ":\n")
nodes_in_cluster <- as.numeric(names(kmeans_result[[cluster_num]]))
# Afficher les informations 'url' et 'parentId' pour chaque nœud du cluster
for (node_id in nodes_in_cluster) {
cat(node_id)
node_info <- data$nodes[[node_id]]
cat("  Nœud", node_id, ":\n")
cat("    - url:", node_info$options$url$url, "\n")
cat("    - parentId:", node_info$parentId, "\n")
}
cat("\n")
}
names(kmeans_result[[cluster_num]])
names(kmeans_result[[1]])
# Afficher les résultats du clustering avec les informations 'url' et 'parentId'
for (cluster_num in seq_along(kmeans_result)) {
cat("\nCluster", cluster_num, ":\n")
nodes_in_cluster <- names(kmeans_result[[cluster_num]])
# Afficher les informations 'url' et 'parentId' pour chaque nœud du cluster
for (node_id in nodes_in_cluster) {
cat(node_id)
node_info <- data$nodes[[node_id]]
cat("  Nœud", node_id, ":\n")
cat("    - url:", node_info$options$url$url, "\n")
cat("    - parentId:", node_info$parentId, "\n")
}
cat("\n")
}
# Afficher les résultats du clustering avec les informations 'url' et 'parentId'
for (cluster_num in seq_along(kmeans_result)) {
cat("\nCluster", cluster_num, ":\n")
nodes_in_cluster <- names(kmeans_result[[cluster_num]])
# Afficher les informations 'url' et 'parentId' pour chaque nœud du cluster
for (node_id in nodes_in_cluster) {
cat(node_id)
node_info <- data$nodes$node_id
cat("  Nœud", node_id, ":\n")
cat("    - url:", node_info$options$url$url, "\n")
cat("    - parentId:", node_info$parentId, "\n")
}
cat("\n")
}
data$nodes$`RM CONSEIL`
data$nodes$`RM CONSEIL`$parentId
data$nodes$`SWISSLIFE FRANCE`$parentId
# Compter le nombre d'occurrences de chaque cluster
cluster_sizes <- table(kmeans_result$cluster)
# Compter le nombre d'occurrences de chaque cluster
cluster_sizes <- table(kmeans_result$cluster)
print(cluster_sizes)
# Appliquer Mini-Batch K-Means
kmeans_result <- kmeans(dense_matrix, centers = num_clusters, iter.max = max_iters,
nstart = num_init, algorithm = "Lloyd", trace = TRUE)
# Compter le nombre d'occurrences de chaque cluster
cluster_sizes <- table(kmeans_result$cluster)
print(cluster_sizes)
cluster_num=1
nodes_in_cluster <- names(kmeans_result[[cluster_num]])
print(nodes_in_cluster)
cluster_num=3
nodes_in_cluster <- names(kmeans_result[[cluster_num]])
print(nodes_in_cluster)
# Compter le nombre d'occurrences de chaque cluster
cluster_sizes <- table(kmeans_result$cluster)
print(cluster_sizes)
kmeans_result$cluster
View(kmeans_result)
View(kmeans_result)
kmeans_result[[cluster_num]]
names(kmeans_result[[cluster_num]])
ckuster_num=1
names(kmeans_result[[cluster_num]])
cluster_num=1
nodes_in_cluster <- names(kmeans_result[[cluster_num]])
print(nodes_in_cluster)
length(nodes_in_cluster)
cluster_sizes <- table(kmeans_result$cluster)
print(cluster_sizes)
# Afficher les résultats du clustering avec les informations 'url' et 'parentId'
for (cluster_num in seq_along(kmeans_result)) {
cat("\nCluster", cluster_num, ":\n")
nodes_in_cluster <- which(kmeans_result$cluster == cluster_num)
# Afficher les informations 'url' et 'parentId' pour chaque nœud du cluster
for (node_id in nodes_in_cluster) {
node_info <- data$nodes$node_id
cat("  Nœud", node_id, ":\n")
cat("    - url:", node_info$options$url$url, "\n")
cat("    - parentId:", node_info$parentId, "\n")
}
cat("\n")
}
# Afficher les résultats du clustering avec les informations 'url' et 'parentId'
for (cluster_num in seq_along(kmeans_result)) {
cat("\nCluster", cluster_num, ":\n")
nodes_in_cluster <- names(which(kmeans_result$cluster == cluster_num))
# Afficher les informations 'url' et 'parentId' pour chaque nœud du cluster
for (node_id in nodes_in_cluster) {
node_info <- data$nodes$node_id
cat("  Nœud", node_id, ":\n")
cat("    - url:", node_info$options$url$url, "\n")
cat("    - parentId:", node_info$parentId, "\n")
}
cat("\n")
}
data$nodes$Secteurs
data$nodes$`L'ALLIANCE DE LA PRESSE D'INFORMATION GENERALE`
data$nodes$`L'ALLIANCE DE LA PRESSE D'INFORMATION GENERALE`$parentId
data$nodes$Secteurs$parentId
